General input :

8
98 183 37 122 14 124 65 67
53


/// FCFS ALGORITHM
#include <bits/stdc++.h>
using namespace std;
void solve()
{
	int n;
	cin >> n;
	vector<int> v;
	v.push_back(0);
	for (int i = 1; i <= n; i++)
	{
		int x;
		cin >> x;
		v.push_back(x);
	}
	int h;
	cin >> h;
	int hh = h;
	int ans = 0;
	for (int i = 1; i <= n; i++)
	{
		int mn = min(v[i], h);
		int mx = max(v[i], h);
		cout << "(" << mx << "-" << mn << ")";
		if (i < n)
			cout << "+";
		ans += abs(v[i] - h);
		h = v[i];
	}
	cout << endl << ans << " cycles" << endl;
	cout << "path : ";
	for (int i = 0; i <= n; i++)
	{
		if (i == 0)
		{
			cout << hh << " ";
			continue;
		}
		cout << v[i] << " ";
	}
}
int main()
{
	solve();
}

/// SSTF
#include <bits/stdc++.h>
#define INF 1000
using namespace std;
void solve()
{
	int n;
	cin >> n;
	vector<int> v(n);
	for (int i = 0; i < n; i++)
		cin >> v[i];

	int head;
	cin >> head;
	int cnt = 0;
	int mn = INF, flag, a;
	vector<int> ans;
	ans.push_back(head);
	while (true)
	{
		cnt++;
		for (int i = 0; i < n; i++)
		{
			if (v[i] != 0)
			{
				if (mn > abs(v[i] - head))
				{
					mn = abs(v[i] - head);
					flag = v[i];
					a = i;
				}
			}
		}
		mn = INF;
		ans.push_back(flag);
		v[a] = 0;
		if (cnt == n)
			break;
	}
	int cylinders = 0;
	for (int i = 0; i < ans.size() - 1; i++)
	{
		int mx = max(ans[i], ans[i + 1]);
		int mn = min(ans[i], ans[i + 1]);
		cylinders += (mx - mn);
		cout << "(" << mx << "-" << mn << ")";
		if (i < ans.size() - 2)
			cout << "+";
	}
	cout << endl
		 << cylinders << " cylinders." << endl;
	for (int i = 0; i < ans.size(); i++)
	{
		if (i == 0)
			cout << "Path : ";
		cout << ans[i] << " ";
	}
}
int main()
{
	solve();
}


///SCAN ALGORITHM
#include <bits/stdc++.h>
using namespace std;
void solve()
{
    int n;
    cin >> n;
    vector<int> v(n + 2);
    int lo = 0, hi = 199;
    v[0] = lo;
    for (int i = 1; i <= n; i++)
        cin >> v[i];
    v[n + 1] = hi;
    int head;
    cin >> head;
    sort(v.begin(), v.end(), greater<int>());
    vector<int> ans;
    ans.push_back(head);
    for (int i = 0; i <= n + 1; i++)
    {
        if (v[i] < head)
            ans.push_back(v[i]);
    }
    for (int i = n; i > 0; i--)
    {
        if (v[i] > head)
            ans.push_back(v[i]);
    }
    int total_head_mov = 0;
    for (int i = 0; i < ans.size() - 1; i++)
    {
        total_head_mov += abs(ans[i] - ans[i + 1]);
        cout << "(" << max(ans[i], ans[i + 1]) << "-"
             << min(ans[i], ans[i + 1]) << ") ";
        if (i < ans.size() - 2)
            cout << "+";
    }
    cout << endl;
    cout << total_head_mov << " Cylinders." << endl;
    for (int i = 0; i < ans.size(); i++)
        cout << ans[i] << " ";
}
int main()
{
    solve();
}


